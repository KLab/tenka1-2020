worker_processes  1;
events {
    worker_connections 1024;
}

env TZ;
env GAMEDB_HOST;
env GAMEDB_PORT;

http {
    log_format main '$time_local $msec\t$status\treqtime:$request_time\t'
                 'in:$request_length\tout:$bytes_sent\trequest:$request\t'
                 'acceptencoding:$http_accept_encoding\treferer:$http_referer\t'
                 'ua:$http_user_agent';

    ## ログ出力先について
    # /usr/local/openresty/nginx/logs/{access,error}.log に出力される.
    #  開発, 本番環境では上記パスのファイルに出力されている.
    #  openresty の docker イメージではこれらが stdout に symlinks されている.
    access_log logs/access.log  main;
    error_log logs/error.log;

    default_type text/plain;
    
    keepalive_timeout 60s;
    client_header_timeout 60s;
    keepalive_disable msie6;
    keepalive_requests 100000;
    tcp_nodelay on;
    
    
    server {
        listen 8080;
        resolver kube-dns.kube-system.svc.cluster.local;
        server_name = $curr_server_name;

        location = /api/health {
            content_by_lua_block {
                ngx.say('Hello, world!')
            }
        }

        location = /api/game {
            content_by_lua_block {
                local redis = require "resty.redis"
                local red, err = redis:new()
                if not red then
                    ngx.log(ngx.ERR, "redis:new() failed")
                    ngx.log(ngx.ERR, tostring(err))
                    return ngx.exit(500)
                end

                red:set_timeout(1000)

                local ok, err = red:connect(
                    os.getenv("GAMEDB_HOST"),
                    tonumber(os.getenv("GAMEDB_PORT")),
                    {pool_size=100, backlog=2048})
                if not ok then
                    ngx.log(ngx.ERR, "red:connect() failed")
                    ngx.log(ngx.ERR, tostring(err))
                    return ngx.exit(500)
                end

                times, err = red:get_reused_times()
                if not times then
                    print("failed to reuse connection pool:" .. err)
                end

                local ok, res = pcall(function()
                    local now = math.floor(ngx.now() * 1000 + 0.5)

                    local res, err = red:zrangebyscore("end_at", "(" .. now, "+inf", "WITHSCORES", "LIMIT", 0, 1)
                    if not res then
                        error({"failed to zrangebyscore", err})
                    end
                    if not res[1] then
                        return {-1, 0}
                    end
                    local game_id = res[1]
                    local end_at = tonumber(res[2])

                    local res, err = red:hget("start_at", game_id)
                    if not res then
                        error({"failed to hget", err})
                    end
                    local start_at = tonumber(res)

                    if now < start_at then
                        return {-1, 0}
                    end

                    return {game_id, end_at - now}
                end)
                if ok then
                    ngx.say(res[1])
                    ngx.say(res[2])
                else
                    if type(res) == "table" then
                        for k, v in pairs(res) do
                            ngx.log(ngx.ERR, tostring(k))
                            ngx.log(ngx.ERR, tostring(v))
                        end
                    else
                        ngx.log(ngx.ERR, tostring(res))
                    end
                    ngx.status = 500
                end

                local ok, err = red:set_keepalive(10000, 10)
                if not ok then
                    ngx.log(ngx.ERR, "red:set_keepalive() failed")
                    ngx.log(ngx.ERR, tostring(err))
                end
            }
        }
        location ~ ^/api/stage/([0-9]+)$ {
            set $game_id $1;
            content_by_lua_block {
                local redis = require "resty.redis"
                local red, err = redis:new()
                if not red then
                    ngx.log(ngx.ERR, "redis:new() failed")
                    ngx.log(ngx.ERR, tostring(err))
                    return ngx.exit(500)
                end

                red:set_timeout(1000)

                local ok, err = red:connect(
                    os.getenv("GAMEDB_HOST"),
                    tonumber(os.getenv("GAMEDB_PORT")),
                    {pool_size=100, backlog=2048})
                if not ok then
                    ngx.log(ngx.ERR, "red:connect() failed")
                    ngx.log(ngx.ERR, tostring(err))
                    return ngx.exit(500)
                end

                local ok, res = pcall(function()
                    local game_id = ngx.var.game_id
                    local now = math.floor(ngx.now() * 1000 + 0.5)

                    local res, err = red:hget("start_at", game_id)
                    if not res then
                        error({"failed to hget", err})
                    end
                    if res == ngx.null then
                        error({"failed to hget: null"})
                    end
                    local start_at = tonumber(res)

                    if now < start_at then
                        error({"failed: game not start"})
                    end

                    local res, err = red:hget("map_info", game_id)
                    if not res then
                        error({"failed to hget", err})
                    end
                    if res == ngx.null then
                        error({"failed to hget: null"})
                    end

                    return res
                end)
                if ok then
                    ngx.say(res)
                else
                    if type(res) == "table" then
                        for k, v in pairs(res) do
                            ngx.log(ngx.ERR, tostring(k))
                            ngx.log(ngx.ERR, tostring(v))
                        end
                    else
                        ngx.log(ngx.ERR, tostring(res))
                    end
                    ngx.status = 500
                end

                local ok, err = red:set_keepalive(10000, 10)
                if not ok then
                    ngx.log(ngx.ERR, "red:set_keepalive() failed")
                    ngx.log(ngx.ERR, tostring(err))
                end
            }
        }

        location ~ ^/api/claim/([0-9a-z]+)/([0-9]+)/([0-9]+)-([0-9]+)-([0-9]+)$ {
            set $user_token $1;
            set $game_id $2;
            set $r $3;
            set $c $4;
            set $m $5;
            content_by_lua_block {
                local r = tonumber(ngx.var.r)
                local c = tonumber(ngx.var.c)
                local m = tonumber(ngx.var.m)
                if not (1 <= m and m <= 20) then
                    ngx.say("invalid m")
                    return
                end
                if not (0 <= r and r <= 20-m) then
                    ngx.say("invalid r")
                    return
                end
                if not (0 <= c and c <= 20-m) then
                    ngx.say("invalid c")
                    return
                end

                local redis = require "resty.redis"
                local red, err = redis:new()
                if not red then
                    ngx.log(ngx.ERR, "redis:new() failed")
                    ngx.log(ngx.ERR, tostring(err))
                    return ngx.exit(500)
                end

                red:set_timeout(1000)

                local ok, err = red:connect(
                    os.getenv("GAMEDB_HOST"),
                    tonumber(os.getenv("GAMEDB_PORT")),
                    {pool_size=100, backlog=2048})
                if not ok then
                    ngx.log(ngx.ERR, "red:connect() failed")
                    ngx.log(ngx.ERR, tostring(err))
                    return ngx.exit(500)
                end

                times, err = red:get_reused_times()
                if not times then
                    print("failed to reuse connection pool:" .. err)
                end

                local ok, res = pcall(function()
                    local user_token = ngx.var.user_token
                    local game_id = ngx.var.game_id
                    local now = math.floor(ngx.now() * 1000 + 0.5)
                    local time_cost = 125 * (m + 1) * (m + 1)

                    local res, err = red:hget("user_token", user_token)
                    if not res then
                        error({"failed to hget user_token", err})
                    end
                    if res == ngx.null then
                        error({"failed to hget user_token: null"})
                    end
                    local user_id = res

                    local res, err = red:hget("start_at", game_id)
                    if not res then
                        error({"failed to hget start_at", err})
                    end
                    if res == ngx.null then
                        error({"invalid_game_id"})
                    end
                    local start_at = tonumber(res)
                    if now < start_at then
                        error({"invalid_game_id"})
                    end

                    local res, err = red:zscore("end_at", game_id)
                    if not res then
                        error({"failed to hget end_at", err})
                    end
                    if res == ngx.null then
                        error({"invalid_game_id"})
                    end
                    local end_at = tonumber(res)
                    if now + time_cost > end_at then
                        return "game_finished"
                    end

                    local unlock_time = nil
                    while true do
                        local res, err = red:eval([[
                            local game_id = ARGV[1]
                            local user_id = ARGV[2]
                            local now = tonumber(ARGV[3])
                            local unlock_time = tonumber(ARGV[4])
                            local r = tonumber(ARGV[5])
                            local c = tonumber(ARGV[6])
                            local m = tonumber(ARGV[7])
                            local claim_unlock = redis.call("hget", "claim_unlock_" .. game_id, user_id)
                            if claim_unlock then
                                local t = tonumber(claim_unlock)
                                if now < t then
                                    return {"claim_time_limit", t}
                                end
                            end
                            redis.call("hset", "claim_unlock_" .. game_id, user_id, unlock_time)
                            local min_claim_time = redis.call("get", "min_claim_time_" .. game_id)
                            if not min_claim_time or now < tonumber(min_claim_time) then
                                redis.call("set", "min_claim_time_" .. game_id, now)
                            end
                            for i=0,(m-1) do
                                for j=0,(m-1) do
                                    local idx = (r+i)*20 + (c+j)
                                    if redis.call("zadd", "claim_" .. game_id .. "_" .. user_id, 'NX', now, idx) == 1 then
                                        redis.call("hincrby", "num_claim_" .. game_id, idx, 1)
                                    end
                                end
                            end
                            return {"ok"}
                        ]], 0, game_id, user_id, now, now + time_cost, r, c, m)
                        if err ~= nil then
                            error({"eval failure", err})
                        end
                        if res[1] ~= "claim_time_limit" then
                            return res[1]
                        end
                        if not unlock_time then
                            unlock_time = res[2]
                        elseif unlock_time ~= res[2] then
                            return "claim_time_limit"
                        end
                        local sleep_time = math.max(1, math.min(unlock_time - now, end_at - now) - 2)
                        if sleep_time > 4000 then
                            return "claim_time_limit"
                        end
                        ngx.sleep(sleep_time / 1000)

                        now = math.floor(ngx.now() * 1000 + 0.5)
                        if now + time_cost > end_at then
                            return "game_finished"
                        end
                    end
                end)
                if ok then
                    ngx.say(res)
                else
                    if type(res) == "table" then
                        for k, v in pairs(res) do
                            ngx.log(ngx.ERR, tostring(k))
                            ngx.log(ngx.ERR, tostring(v))
                        end
                    else
                        ngx.log(ngx.ERR, tostring(res))
                    end
                    ngx.status = 500
                end

                local ok, err = red:set_keepalive(10000, 10)
                if not ok then
                    ngx.log(ngx.ERR, "red:set_keepalive() failed")
                    ngx.log(ngx.ERR, tostring(err))
                end
            }
        }
        location ~ ^/api/areas/([0-9a-z]+)/([0-9]+)$ {
            set $user_token $1;
            set $game_id $2;
            content_by_lua_block {
                local redis = require "resty.redis"
                local red, err = redis:new()
                if not red then
                    ngx.log(ngx.ERR, "redis:new() failed")
                    ngx.log(ngx.ERR, tostring(err))
                    return ngx.exit(500)
                end

                red:set_timeout(1000)

                local ok, err = red:connect(
                    os.getenv("GAMEDB_HOST"),
                    tonumber(os.getenv("GAMEDB_PORT")),
                    {pool_size=100, backlog=2048})
                if not ok then
                    ngx.log(ngx.ERR, "red:connect() failed")
                    ngx.log(ngx.ERR, tostring(err))
                    return ngx.exit(500)
                end

                times, err = red:get_reused_times()
                if not times then
                    print("failed to reuse connection pool:" .. err)
                end

                local ok, res = pcall(function()
                    local user_token = ngx.var.user_token
                    local game_id = ngx.var.game_id
                    local now = math.floor(ngx.now() * 1000 + 0.5)

                    local res, err = red:hget("user_token", user_token)
                    if not res then
                        error({"failed to hget user_token", err})
                    end
                    if res == ngx.null then
                        error({"failed to hget user_token: null"})
                    end
                    local user_id = res

                    local res, err = red:hget("start_at", game_id)
                    if not res then
                        error({"failed to hget start_at", err})
                    end
                    if res == ngx.null then
                        error({"invalid_game_id"})
                    end
                    local start_at = tonumber(res)
                    if now < start_at then
                        error({"invalid_game_id"})
                    end

                    local res, err = red:eval([[
                        local game_id = ARGV[1]
                        local user_id = ARGV[2]
                        local now = tonumber(ARGV[3])
                        local last_areas = redis.call("hget", "last_areas", user_id)
                        if last_areas then
                            local second_last_areas = redis.call("hget", "second_last_areas", user_id)
                            if second_last_areas and now < tonumber(second_last_areas) + 500 then
                                return {"too_many_request"}
                            end
                            redis.call("hset", "second_last_areas", user_id, last_areas)
                        end
                        redis.call("hset", "last_areas", user_id, now)
                        local num_claim = redis.call("hgetall", "num_claim_" .. game_id)
                        local claim = redis.call("zrange", "claim_" .. game_id .. "_" .. user_id, 0, -1)
                        return {"ok", num_claim, claim}
                    ]], 0, game_id, user_id, now)
                    if err ~= nil then
                        error({"eval failure", err})
                    end
                    if res[1] ~= "ok" then
                        return {res[1]}
                    end
                    local num_claim_table = {}
                    local claim_table = {}
                    for i = 1, 20*20 do
                        num_claim_table[i] = 0
                        claim_table[i] = 0
                    end
                    local num_claim = res[2]
                    local i = 1
                    while true do
                        if not num_claim[i] then break end
                        num_claim_table[tonumber(num_claim[i]) + 1] = tonumber(num_claim[i+1])
                        i = i + 2
                    end
                    for _, v in ipairs(res[3]) do
                        claim_table[tonumber(v) + 1] = 1
                    end

                    local ret = {"ok"}
                    for i = 0, 19 do
                        local line = table.concat(num_claim_table, " ", i*20 + 1, i*20 + 20)
                        table.insert(ret, line)
                    end
                    for i = 0, 19 do
                        local line = table.concat(claim_table, " ", i*20 + 1, i*20 + 20)
                        table.insert(ret, line)
                    end
                    return ret
                end)
                if ok then
                    for _, v in ipairs(res) do
                        ngx.say(v)
                    end
                else
                    if type(res) == "table" then
                        for k, v in pairs(res) do
                            ngx.log(ngx.ERR, tostring(k))
                            ngx.log(ngx.ERR, tostring(v))
                        end
                    else
                        ngx.log(ngx.ERR, tostring(res))
                    end
                    ngx.status = 500
                end

                local ok, err = red:set_keepalive(10000, 10)
                if not ok then
                    ngx.log(ngx.ERR, "red:set_keepalive() failed")
                    ngx.log(ngx.ERR, tostring(err))
                end
            }
        }
        location ~ ^/api/ranking/([0-9a-z]+)/([0-9]+)$ {
            set $user_token $1;
            set $game_id $2;
            content_by_lua_block {
                local redis = require "resty.redis"
                local red, err = redis:new()
                if not red then
                    ngx.log(ngx.ERR, "redis:new() failed")
                    ngx.log(ngx.ERR, tostring(err))
                    return ngx.exit(500)
                end

                red:set_timeout(1000)

                local ok, err = red:connect(
                    os.getenv("GAMEDB_HOST"),
                    tonumber(os.getenv("GAMEDB_PORT")),
                    {pool_size=100, backlog=2048})
                if not ok then
                    ngx.log(ngx.ERR, "red:connect() failed")
                    ngx.log(ngx.ERR, tostring(err))
                    return ngx.exit(500)
                end

                times, err = red:get_reused_times()
                if not times then
                    print("failed to reuse connection pool:" .. err)
                end

                local ok, res = pcall(function()
                    local user_token = ngx.var.user_token
                    local game_id = ngx.var.game_id
                    local now = math.floor(ngx.now() * 1000 + 0.5)

                    local res, err = red:hget("user_token", user_token)
                    if not res then
                        error({"failed to hget user_token", err})
                    end
                    if res == ngx.null then
                        error({"failed to hget user_token: null"})
                    end
                    local user_id = res

                    local res, err = red:hget("start_at", game_id)
                    if not res then
                        error({"failed to hget start_at", err})
                    end
                    if res == ngx.null then
                        error({"failed to hget start_at: null"})
                    end
                    local start_at = tonumber(res)

                    if now < start_at then
                        error({"failed: game not start"})
                    end

                    local res, err = red:eval([[
                        local game_id = ARGV[1]
                        local user_id = ARGV[2]
                        local now = tonumber(ARGV[3])
                        local last_ranking = redis.call("hget", "last_ranking", user_id)
                        if last_ranking then
                            local second_last_ranking = redis.call("hget", "second_last_ranking", user_id)
                            if second_last_ranking and now < tonumber(second_last_ranking) + 500 then
                                return {"too_many_request"}
                            end
                            redis.call("hset", "second_last_ranking", user_id, last_ranking)
                        end
                        redis.call("hset", "last_ranking", user_id, now)
                        return {"ok"}
                    ]], 0, game_id, user_id, now)

                    if err ~= nil then
                        error({"failed to eval", err})
                    end
                    if res == ngx.null then
                        error({"failed to eval: null"})
                    end

                    if res[1] ~= "ok" then
                        return {res[1]}
                    end

                    local a = {"ok", user_id}

                    local my_score = 0
                    local my_rank = 0

                    local res, err = red:zrevrangebyscore("ranking_" .. game_id, "+inf", "-inf", "WITHSCORES", "LIMIT", 0, 10)
                    if not res then
                        error({"failed to zrevrangebyscore", err})
                    end
                    local n = #res / 2
                    table.insert(a, n)
                    for i = 1, n do
                        table.insert(a, res[2*i-1] .. " " .. tostring(res[2*i]))
                        if res[2*i-1] == user_id then
                            my_rank = i
                            my_score = tonumber(res[2*i])
                        end
                    end
                    if my_rank == 0 then
                        local res, err = red:zscore("ranking_" .. game_id, user_id)
                        if not res then
                            error({"failed to zscore ranking", err})
                        end
                        if res ~= ngx.null then
                            local str_my_score = tostring(res)
                            my_score = tonumber(res)
                            local res, err = red:zcount("ranking_" .. game_id, "(" .. str_my_score, "+inf")
                            if not res then
                                error({"failed to zrevrank ranking", err})
                            end
                            if res ~= ngx.null then
                                my_rank = res + 1
                            end
                        else
                            local res, err = red:zcard("ranking_" .. game_id)
                            if not res then
                                error({"failed to zcard ranking", err})
                            end
                            if res ~= ngx.null then
                                my_rank = res + 1
                            end
                        end
                    end
                    table.insert(a, my_rank)
                    table.insert(a, my_score)
                    return a
                end)
                if ok then
                    for _, v in ipairs(res) do
                        ngx.say(v)
                    end
                else
                    if type(res) == "table" then
                        for k, v in pairs(res) do
                            ngx.log(ngx.ERR, tostring(k))
                            ngx.log(ngx.ERR, tostring(v))
                        end
                    else
                        ngx.log(ngx.ERR, tostring(res))
                    end
                    ngx.status = 500
                end

                local ok, err = red:set_keepalive(10000, 10)
                if not ok then
                    ngx.log(ngx.ERR, "red:set_keepalive() failed")
                    ngx.log(ngx.ERR, tostring(err))
                end
            }
        }
    }
}
